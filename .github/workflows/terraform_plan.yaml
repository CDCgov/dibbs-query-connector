name: Ad-hoc Terraform Plan
run-name: Terraform plan ${{ inputs.workspace }} by @${{ github.actor }}

on:
  pull_request:
    branches:
      - shanice/deploy_demo_ecs
  merge_group:
    types:
      - checks_requested
  workflow_dispatch:
    inputs:
      workspace:
        description: "Choose terraform workspace for deployment"
        required: true
        type: choice
        options:
          - dev
          - demo
        default: dev

concurrency:
  group: ${{ github.event.inputs.workspace }}-terraform
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read

env:
  workspace: ${{ github.event.inputs.workspace }}

jobs:
  terraform:
    name: Run Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/implementation/ecs
    steps:
      - name: Check Out Changes
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: "1.9.8"

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set workspace
        id: set-workspace
        run: |-
          echo "workspace=$(
          if [[ "${{ github.event.inputs.workspace }}" != "" ]]; then
            echo ${{ github.event.inputs.workspace}}
          else
            echo dev
          fi
          )" >> $GITHUB_OUTPUT

      - name: Set URL format
        id: set-url-format
        run: |
          if [[ "${{ steps.set-workspace.outputs.workspace }}" == "dev" ]]; then
            echo "base_url=https://${{ secrets.ECS_HOSTNAME }}" >> $GITHUB_OUTPUT
          else
            echo "base_url=https://${{ steps.set-workspace.outputs.workspace }}.${{ secrets.ECS_HOSTNAME }}" >> $GITHUB_OUTPUT
          fi

      - name: Terraform
        env:
          BUCKET: ${{ secrets.TFSTATE_BUCKET }}
          DYNAMODB_TABLE: ${{ secrets.TFSTATE_DYNAMODB_TABLE }}
          REGION: ${{ vars.region }}
          WORKSPACE: ${{ env.workspace }}
          TF_VAR_umls_api_key: ${{ secrets.UMLS_API_KEY }}
          TF_VAR_ersd_api_key: ${{ secrets.ERSD_API_KEY}}
          TF_VAR_qc_tls_cert: ${{ secrets.TLS_CERT}}
          TF_VAR_qc_tls_key: ${{ secrets.TLS_KEY}}
          TF_VAR_auth_secret: ${{ secrets.AUTH_SECRET }}
          TF_VAR_auth_keycloak_issuer: ${{ steps.set-url-format.outputs.base_url }}/keycloak
          TF_VAR_auth_url: ${{ steps.set-url-format.outputs.base_url }}
          TF_VAR_aidbox_base_url: ${{ steps.set-url-format.outputs.base_url }}/aidboxone
          TF_VAR_aidbox_client_secret: ${{ secrets.AIDBOX_CLIENT_SECRET }}
          TF_VAR_aidbox_admin_password: ${{ secrets.AIDBOX_ADMIN_PASSWORD }}
          TF_VAR_aidbox_license: ${{ secrets.AIDBOX_LICENSE }}
          TF_VAR_bastion_public_key: ${{ secrets.BASTION_PUBLIC_KEY }}
          TF_VAR_bastion_private_key: ${{ secrets.BASTION_PRIVATE_KEY }}
          TF_VAR_bastion_allowed_ips: ${{ secrets.BASTION_ALLOWED_IPS }}
        shell: bash
        run: |
          echo "Deploying to ${{ github.event.inputs.workspace }}..."
          rm -rf .terraform .terraform.lock.hcl
          terraform init \
            -var-file="$WORKSPACE.tfvars" \
            -backend-config "bucket=$BUCKET" \
            -backend-config "dynamodb_table=$DYNAMODB_TABLE" \
            -backend-config "region=$REGION" \
            || (echo "terraform init failed, exiting..." && exit 1)
          terraform workspace select "$WORKSPACE"
          terraform apply -auto-approve -target=data.aws_acm_certificate.acm_cert \
            -var-file="$WORKSPACE.tfvars"
          terraform plan \
            -var-file="$WORKSPACE.tfvars"
